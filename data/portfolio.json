[
    {
        "image": "sophie-blue.webp",
        "title": "Sophie Bluel ARCHITECTE D'INTÉRIEUR",
        "text": "Créez une page web dynamique avec JavaScript",
        "link": "https://viejofacha.github.io/Sophie-Bluel/",
        "details": "<p>Développement d’une page web interactive en JavaScript. Dans le cadre de ce projet, j’ai conçu une page web dynamique en utilisant uniquement HTML, CSS et JavaScript. L’objectif principal était d’ajouter de l’interactivité au site sans recourir à des frameworks ou bibliothèques externes.</p><p>Le site permet par exemple de manipuler dynamiquement le DOM, d'afficher des données provenant de fichiers JSON, de gérer des événements utilisateur (clics, scroll, survol, etc.), et d’actualiser le contenu de la page sans rechargement. Des fonctionnalités telles que l’ouverture de modales, l’ajout de classes dynamiques, ou encore la gestion conditionnelle de sections visibles selon l’état du document ont été intégrées.</p><p>Ce projet m’a permis de renforcer ma compréhension des bases du langage JavaScript, notamment :</p><ul><li>la manipulation du DOM (Document Object Model),</li><li>la gestion des événements (<code>addEventListener</code>, <code>onclick</code>, etc.),</li><li>le parcours de structures de données (objets, tableaux),</li><li>et l’interaction avec des fichiers de données externes via <code>fetch()</code> et les Promesses.</li></ul><p>Ce travail m’a permis de poser les fondations d’une interface utilisateur réactive et évolutive — une compétence essentielle pour la suite de mon parcours en développement web.</p>",

        "alt": "Projet: site web Sophie Bluel"

    },
    {
        "image": "print-it.webp",
        "title": "Développer un carrousel sur un site Web en direct",
        "text": "Créez un carrousel avec HTML, CSS et JS",
        "link": "https://viejofacha.github.io/Print-it/",
        "details": "<p>Ce projet avait pour objectif de créer un carrousel d’images dynamique en utilisant HTML, CSS et JavaScript. L’idée était de développer un composant interactif permettant à l’utilisateur de faire défiler plusieurs images ou contenus, tout en assurant une transition fluide et contrôlée.</p><p>Le carrousel utilise une structure HTML propre, stylisée avec des animations CSS pour le glissement des éléments. La logique JavaScript permet de gérer les clics sur les flèches de navigation, la boucle automatique, ou encore la sélection manuelle d’une diapositive spécifique.</p><p>Ce projet m’a permis de maîtriser plusieurs aspects essentiels :</p><ul><li>la manipulation du DOM pour changer dynamiquement les classes et les styles,</li><li>la gestion des événements utilisateur (clics, timers, interactions),</li><li>l’utilisation de tableaux pour parcourir et afficher des contenus dynamiques,</li><li>la synchronisation entre l’interface visuelle et la logique JavaScript.</li></ul><p>Ce carrousel constitue une base solide pour des composants plus avancés comme les galeries d’images, les témoignages ou les diaporamas personnalisés, tout en consolidant les compétences en interaction front-end.</p>",

        "alt": "Projet: site web Sophie Bluel"

    },
    {
        "image": "porfolio.webp",
        "title": "Salut, je m'appelle maçonWeb",
        "text": "Créez et publiez votre portfolio de testeur logiciel",
        "link": "https://maconweb.dev",
        "details": "<p>Ce projet constitue l’aboutissement de mon parcours de formation en test logiciel. Il consistait à concevoir, développer et mettre en ligne un portfolio professionnel présentant mes compétences, outils et expériences en tant que futur testeur QA. L’objectif était à la fois technique et personnel : construire un site fonctionnel, ergonomique et reflétant ma maîtrise des pratiques de test.</p><p>Le portfolio a été réalisé avec HTML, CSS et JavaScript, en intégrant des éléments dynamiques tels que des modales, des filtres, un carrousel et une lecture de données à partir de fichiers JSON. J’ai également utilisé GitHub pour la gestion du code source, et Hostinger pour l’hébergement web, avec mise en place d’un déploiement automatique via Webhooks.</p><p>Ce projet m’a permis de :</p><ul><li>mettre en œuvre une architecture de code claire et réutilisable,</li><li>maîtriser l’intégration de données dynamiques via JavaScript,</li><li>gérer un dépôt Git avec versioning propre,</li><li>configurer un hébergement réel avec un nom de domaine personnalisé,</li><li>présenter mes projets de manière professionnelle, avec des liens vers des livrables (plans de test, cahiers de recette, résultats de tests automatisés, etc.).</li></ul><p>Ce portfolio est un outil concret pour valoriser mes compétences auprès de recruteurs et démontrer ma capacité à mener un projet technique de bout en bout.</p>",

    
        "alt": "Projet:Porfolio Personnsel"

    },
    {
        "image": "cahier_de_recette.webp",
        "title": "Plan de Test Cahier de Recette",
        "text": "Un cahier de recette est un document qui liste des scénarios de test.",
        "link": "docs/PowePoint_P4-correction.pdf",
        "alt": "PDF Projet: Cahier de Recette",
        "details": "<p>Dans ce projet, j’ai rédigé et exécuté un <strong>plan de test fonctionnel</strong> accompagné d’un <strong>cahier de recette</strong> structuré, dans le but de valider un site web développé. Le travail consistait à identifier des anomalies, vérifier les fonctionnalités clés et formaliser les résultats sous forme de livrables professionnels.</p><p>Le <em>cahier de recette</em> est un document listant des <strong>scénarios de test</strong> complets, comprenant des cas de test, les résultats attendus et obtenus, ainsi que des commentaires (OK/KO) justifiant chaque écart ou validation.</p><p>Le processus a inclus les étapes suivantes :</p><ul><li>Installation de l’environnement local avec Docker et <code>docker-compose up</code></li><li>Accès au site à tester via <code>http://localhost:8081</code></li><li>Lecture du cahier en entier avant l’exécution des tests</li><li>Déroulement systématique de chaque cas de test</li><li>Documenter les résultats (succès ou anomalies)</li></ul><p>J’ai également mené des <strong>tests exploratoires</strong> pour identifier des bugs non couverts par les scénarios initiaux, en variant les navigateurs, appareils, tailles d’écran et données saisies.</p><p>Les livrables comprenaient :</p><ul><li>Un cahier de recette complet (fichier Excel)</li><li>La liste des anomalies détectées</li><li>Des suggestions de corrections</li></ul><p>Ce projet m’a permis de mettre en œuvre une méthodologie rigoureuse de test fonctionnel, d’utiliser des outils comme Docker, Visual Studio Code et Jira, et de structurer ma documentation dans un format professionnel facilement réutilisable pour un contexte réel.</p>"


    },
    {
        "image": "menuMaker.webp",
        "title": "Menu Maker by Qwenta",
        "text": " il s’agit de proposer aux restaurateurs un outil en ligne dynamique, leur permettant de créer, modifier et publier leurs menus de manière autonome et visuell",
        "link": "docs/Martin_Pedraza_Alejandro_4_presentation_042025.pdf",
        "alt": "PDF Projet: Menu Maker",
        "details": "<p>Le projet <strong>Menu Maker</strong> est une application web conçue pour permettre aux restaurateurs de créer, personnaliser et publier leurs menus de manière autonome. Réalisé pour le compte de l’entreprise Qwenta, ce projet avait pour objectif de proposer une solution numérique intuitive et visuelle, adaptée aux besoins réels des professionnels du secteur.</p><p>Développé avec une stack moderne (React, Node.js, Express, Firebase/MongoDB), le site intègre des fonctionnalités essentielles :</p><ul><li>Création dynamique de menus (ajout de catégories, de plats avec images et prix)</li><li>Prévisualisation en temps réel des modifications</li><li>Personnalisation visuelle (couleurs, typographies, logos)</li><li>Gestion des menus sauvegardés (modifier, dupliquer, exporter)</li><li>Exportation en PDF pour impression ou diffusion en ligne</li></ul><p>Le projet a été mené en suivant la méthodologie <strong>Agile Scrum</strong>, découpé en sprints avec gestion des user stories, story points, et un tableau Kanban sur Notion. Chaque fonctionnalité a été priorisée et développée de manière itérative avec une attention portée à l’expérience utilisateur, la responsivité et la sécurité.</p><p>Un accent particulier a été mis sur :</p><ul><li>la mise en place d’une API REST pour la communication front-end / back-end,</li><li>l’authentification sécurisée (Firebase Auth avec magic link),</li><li>la compatibilité multi-navigateurs et l’accessibilité (normes WCAG),</li><li>la personnalisation et évolutivité du produit (design modulaire et composants réutilisables)</li></ul><p>Le projet est également accompagné d’une veille technologique structurée selon deux axes : les technologies spécifiques utilisées (React, Sequelize, Express…) et les bonnes pratiques du développement web (accessibilité, sécurité, responsive design…).</p><p>Ce projet représente un aboutissement concret de mes compétences en développement et test web, combinant conception technique, rigueur fonctionnelle, et mise en production réelle via GitHub et Hostinger.</p>"

    },
    {
        "image": "kasa.api.webp",
        "title": "CRÉER UNE APPLICATIONWEB DE LOCATION IMMOBILIÈRE AVEC REACT",
        "text": "HTTPS://GITHUB.COM/VIEJOFACHA/KASA-API.GIT",
        "link": "docs/Créer une application web de location immobilière avec React.pdf",
        "alt": "PDF Projet: REACT",
        "details": "<p>Ce projet avait pour objectif de concevoir une application web de location immobilière en utilisant la bibliothèque <strong>React</strong>. L’application permet aux utilisateurs de consulter des logements disponibles à la location, d’afficher leurs détails (photos, descriptions, équipements, etc.) et de naviguer entre les pages sans rechargement, grâce à l’implémentation de <strong>React Router</strong>.</p><p>J’ai développé plusieurs composants clés pour construire une interface utilisateur fluide, réactive et modulaire :</p><ul><li><strong>Header</strong> : barre de navigation avec liens dynamiques vers la page d’accueil et la page À propos. Les liens changent de style selon l’état actif.</li><li><strong>Carrousel</strong> : affichage dynamique d’un diaporama d’images pour chaque logement, avec navigation manuelle ou automatique.</li><li><strong>LogementCard</strong> : carte de présentation pour chaque logement sur la page d’accueil, contenant image, titre, localisation et lien vers les détails.</li><li><strong>Collapse</strong> : composant accordéon réutilisable permettant d’afficher ou masquer des informations comme la description ou les équipements.</li></ul><p>L’organisation du projet respecte les bonnes pratiques React : séparation des composants, logique claire, et réutilisabilité. Le code est hébergé sur GitHub (<a href='https://github.com/viejofacha/kasa-api.git' target='_blank'>voir le dépôt</a>) et respecte une structure professionnelle avec gestion d’état locale et design responsive.</p><p>Ce projet m’a permis de maîtriser les bases de React, la gestion de routes dynamiques, la création de composants personnalisés, ainsi que la structuration propre d’une application front-end moderne.</p>"


    }
]
